[{"content":"幻觉 Hallucination AI生成内容会出现幻觉（Hallucination）问题，主要因素一是LLM的概率生成机制，预测下一个词，可能会引致生成与事实不符的内容；二是训练数据有限，回答无法掌握更多私有的知识与最新的信息。\n检索增强生成 RAG RAG（Retrieval-Augmented Generation）则是为了更好的解决幻觉问题，提升模型的输出质量。有以下优势：\n减少幻觉 提供当前时间的信息与特定领域的信息 与模型微调（fine-tuning）每次预训练静态数据相比，更有效率与性价比 RAG 流程图 ![RAG flow chart](/images/my_image.jpg) 文本分块 Text Split 将知识库的各种文件、数据分割成 Text Chunk，分割的好坏影响RAG的效果\n嵌入模型 Embedding Model 一种机器学习模型，可以将高维输入数据（如文本、图像）转换为低维向量，这些低维向量捕捉了文本的语义信息，有多种模型可以生成向量嵌入，如OpenAI的text-embedding-3-large\n向量嵌入 Vector Embedding 是将数据以数值向量的形式来进行表示，可以让ML算法能更轻松地对数据进行处理和解读，以数值形式捕捉对象间的语义关系，这些数值可以表示对象的特征。可以通过向量搜索或相似性搜索（Similarity Search）在向量空间中查找相似对象\n向量数据库 Vector Database 存储Vector Embedding等海量的高维向量，主要用于处理与相似性搜索有关的任务。主流厂商有Pinecone/ milvus/ Chroma/ Redis等\n向量数据主要是由非结构化数据（Un-Structured Data）（如文本、视频、音频等，占全球数据80%）通过嵌入模型（Embedding Model）转换为向量嵌入，结构化数据（Structured Data）则以表格形式存在，如传统的数据库，存储明确的数据类型\n检索 Retrieve 本质上是在向量空间中寻找与查询向量最相似（相邻）的邻居\n最常用的度量指标：\n欧氏距离（Euclidean Distance）两点之间的直线距离\n余弦相似度（Cosine Similarity）非零向量的夹角的余弦值，常用于基于文本的数据\n点积相似度(Dot Product Similarity) 两个向量的模长以及夹角余弦值的乘积\n找出Top K chunks ,然后在此基础上重新排序 Re-ranking，更准确地挑选最合适的片段\n提示词模版 将提示词模版与检索得到的context以及用户问题组合构建，输入给LLM,得到最终的输出结果返回给用户\n这些context通过向量搜索从知识库中检索出来的，然后经过解码/转化后形成自然语言文本\n如何找到最近邻 暴力搜索 Brute force search 穷举所有数据点\n近似最近邻算法 ANN (Approximate Nearest Neighbor search) 核心思想，通过权衡精度与效率，牺牲少量精度，来显著提升搜索速度。构建专门的索引结构（Index），优化搜索路径，有效缩减搜索空间，实现快速检索\n向量索引（Vector Indexing） 预先计算Vector Embedding之间的相似度，并将相似的向量组织在一起的过程\n多种技术路线：\nData Structure\nHash-based index : LSH\nTree-based index : ANNOY\nCluster-based index : HNSW\nGraph-based index : IVF\nCompression\nVector Quantization: 标量量化 SQ / 乘积量化 PQ 当前最流行的算法：层次化可导航小世界 HNSW (Hierarchical Navigable Small World)\n基于图结构的算法，高层级的图由较少的节点组成，可实现快速大范围跳跃，缩小搜索空间，最底层包括所有数据点，搜索过程从顶层开始，直到在最底层找到最近邻点\n选择ANN算法时，通常会面临不可能三角：速度、准确性、内存，要做权衡（trade-off）\nReference: https://www.bilibili.com/video/BV11zf6YyEnT/?share_source=copy_web\u0026amp;vd_source=455b7b6ca525cd39eefd45df780028d2\n","permalink":"https://blog.nullkey.top/posts/rag/","summary":"\u003ch2 id=\"幻觉-hallucination\"\u003e幻觉 Hallucination\u003c/h2\u003e\n\u003cp\u003eAI生成内容会出现幻觉（Hallucination）问题，主要因素一是LLM的概率生成机制，预测下一个词，可能会引致生成与事实不符的内容；二是训练数据有限，回答无法掌握更多私有的知识与最新的信息。\u003c/p\u003e\n\u003ch2 id=\"检索增强生成-rag\"\u003e检索增强生成 RAG\u003c/h2\u003e\n\u003cp\u003eRAG（Retrieval-Augmented Generation）则是为了更好的解决幻觉问题，提升模型的输出质量。有以下优势：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e减少幻觉\u003c/li\u003e\n\u003cli\u003e提供当前时间的信息与特定领域的信息\u003c/li\u003e\n\u003cli\u003e与模型微调（fine-tuning）每次预训练静态数据相比，更有效率与性价比\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"rag-流程图\"\u003eRAG 流程图\u003c/h2\u003e\n\u003cpre\u003e\u003ccode\u003e![RAG flow chart](/images/my_image.jpg)\n\u003c/code\u003e\u003c/pre\u003e\n\u003ch3 id=\"文本分块-text-split\"\u003e文本分块 Text Split\u003c/h3\u003e\n\u003cp\u003e将知识库的各种文件、数据分割成 Text Chunk，分割的好坏影响RAG的效果\u003c/p\u003e\n\u003ch3 id=\"嵌入模型-embedding-model\"\u003e嵌入模型 Embedding Model\u003c/h3\u003e\n\u003cp\u003e一种机器学习模型，可以将高维输入数据（如文本、图像）转换为低维向量，这些低维向量捕捉了文本的语义信息，有多种模型可以生成向量嵌入，如OpenAI的text-embedding-3-large\u003c/p\u003e\n\u003ch3 id=\"向量嵌入-vector-embedding\"\u003e向量嵌入 Vector Embedding\u003c/h3\u003e\n\u003cp\u003e是将数据以数值向量的形式来进行表示，可以让ML算法能更轻松地对数据进行处理和解读，以数值形式捕捉对象间的语义关系，这些数值可以表示对象的特征。可以通过向量搜索或相似性搜索（Similarity Search）在向量空间中查找相似对象\u003c/p\u003e\n\u003ch3 id=\"向量数据库-vector-database\"\u003e向量数据库 Vector Database\u003c/h3\u003e\n\u003cp\u003e存储Vector Embedding等海量的高维向量，主要用于处理与相似性搜索有关的任务。主流厂商有Pinecone/ milvus/ Chroma/ Redis等\u003c/p\u003e\n\u003cp\u003e向量数据主要是由非结构化数据（Un-Structured Data）（如文本、视频、音频等，占全球数据80%）通过嵌入模型（Embedding Model）转换为向量嵌入，结构化数据（Structured Data）则以表格形式存在，如传统的数据库，存储明确的数据类型\u003c/p\u003e\n\u003ch3 id=\"检索-retrieve\"\u003e检索 Retrieve\u003c/h3\u003e\n\u003cp\u003e本质上是在向量空间中寻找与查询向量最相似（相邻）的邻居\u003c/p\u003e\n\u003cp\u003e最常用的度量指标：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e欧氏距离（Euclidean Distance）两点之间的直线距离\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e余弦相似度（Cosine Similarity）非零向量的夹角的余弦值，常用于基于文本的数据\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e点积相似度(Dot Product Similarity) 两个向量的模长以及夹角余弦值的乘积\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e找出Top K chunks ,然后在此基础上重新排序 Re-ranking，更准确地挑选最合适的片段\u003c/p\u003e\n\u003ch3 id=\"提示词模版\"\u003e提示词模版\u003c/h3\u003e\n\u003cp\u003e将提示词模版与检索得到的context以及用户问题组合构建，输入给LLM,得到最终的输出结果返回给用户\u003c/p\u003e\n\u003cp\u003e这些context通过向量搜索从知识库中检索出来的，然后经过解码/转化后形成自然语言文本\u003c/p\u003e\n\u003ch2 id=\"如何找到最近邻\"\u003e如何找到最近邻\u003c/h2\u003e\n\u003ch3 id=\"暴力搜索-brute-force-search\"\u003e暴力搜索 Brute force search\u003c/h3\u003e\n\u003cp\u003e穷举所有数据点\u003c/p\u003e\n\u003ch3 id=\"近似最近邻算法-ann-approximate-nearest-neighbor-search\"\u003e近似最近邻算法 ANN (Approximate Nearest Neighbor search)\u003c/h3\u003e\n\u003cp\u003e核心思想，通过权衡精度与效率，牺牲少量精度，来显著提升搜索速度。构建专门的索引结构（Index），优化搜索路径，有效缩减搜索空间，实现快速检索\u003c/p\u003e","title":"RAG"},{"content":"0. 前言 一直有个域名，平时只是用于作为伪装域名，于是尝试搭建个人博客,实现思路是使用 Hugo + Github Pages。\n目前有三个主流的静态博客生成器Jekyll、Hexo 和 Hugo\n1. Jekyll - Jekyll 是最早流行的静态博客生成器之一，广泛用于 GitHub Pages，GitHub Pages 官方支持 - Jekyll 是用 Ruby 编写的，需要安装 Ruby 环境来运行。 2. Hexo - Hexo 使用 Node.js 进行构建，速度较快，插件丰富。 3. Hugo - Hugo 是用 Go 语言编写的，是目前速度最快的静态博客生成器，尤其适合有大量内容的网站。 - 支持多语言、分类、标签等高级功能，适合需要组织大量内容的用户。 - Hugo 的配置文件和结构非常简洁，易于上手。 我本身就是写Go的，遂选择了Hugo\n1. 准备工作 1.1 域名配置 DNS 设置：在域名服务商处设置了以下 DNS 记录： CNAME 记录指向 xxx.github.io。 需要注意要在Github的Setting里设置Pages的CNAME\n1.2 Hugo 安装与配置 安装 Hugo：在本地机器上通过 Homebrew 安装了 Hugo： brew install hugo 2. 配置博客 2.1 创建一个 Hugo 网站 hugo new site myblog cd myblog 2.2 选择并安装主题 我选择了简洁风格的PaperMod主题\ngit init git submodule add https://github.com/theNewDynamic/gohugo-theme-paperMod.git themes/paperMod 2.3 配置 config.yml hugo默认的配置文件叫hugo.toml，PaperMod官方推荐的配置文件是yaml文件，于是删掉原始配置文件，自己重建了一个config.yml,并对主题进行设置\ntheme: \u0026#34;paperMod\u0026#34; 2.4 创建内容 创建一篇新的文章： hugo new posts/first-post.md 使用Markdown语法编辑该md文件，修改完成后，将 draft: true 修改为 draft: false，以便发布该文章。 2.5 本地预览 启动本地服务器： hugo server 打开浏览器，访问 http://localhost:1313/ 即可预览博客。 3. 部署服务器 执行指令 hugo，会将所有静态文件放置于 /public目录下，将该目录下的所有文件推送至远程仓库，即可完成代码的托管\ncd public git init git add . git commit -m \u0026#34;Initial commit\u0026#34; git remote add origin https://github.com/yourusername/yourusername.github.io.git git push -u origin main 4. 发布新内容 4.1 创建新的文章 hugo new posts/new-post.md 4.2 编辑内容并将其发布 hugo 4.3 推送更新到 GitHub Pages ","permalink":"https://blog.nullkey.top/posts/personal_blog_note/","summary":"\u003ch1 id=\"0-前言\"\u003e0. 前言\u003c/h1\u003e\n\u003cp\u003e一直有个域名，平时只是用于作为伪装域名，于是尝试搭建个人博客,实现思路是使用 Hugo + Github Pages。\u003c/p\u003e\n\u003cp\u003e目前有三个主流的静态博客生成器Jekyll、Hexo 和 Hugo\u003c/p\u003e\n\u003cpre tabindex=\"0\"\u003e\u003ccode\u003e1. Jekyll\n\n- Jekyll 是最早流行的静态博客生成器之一，广泛用于 GitHub Pages，GitHub Pages 官方支持\n- Jekyll 是用 Ruby 编写的，需要安装 Ruby 环境来运行。\n\n2. Hexo\n\n- Hexo 使用 Node.js 进行构建，速度较快，插件丰富。\n\n3. Hugo\n\n- Hugo 是用 Go 语言编写的，是目前速度最快的静态博客生成器，尤其适合有大量内容的网站。\n- 支持多语言、分类、标签等高级功能，适合需要组织大量内容的用户。\n- Hugo 的配置文件和结构非常简洁，易于上手。\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e我本身就是写Go的，遂选择了Hugo\u003c/p\u003e\n\u003ch1 id=\"1-准备工作\"\u003e1. 准备工作\u003c/h1\u003e\n\u003ch2 id=\"11-域名配置\"\u003e1.1 域名配置\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eDNS 设置\u003c/strong\u003e：在域名服务商处设置了以下 DNS 记录：\n\u003cul\u003e\n\u003cli\u003eCNAME 记录指向 \u003ccode\u003exxx.github.io\u003c/code\u003e。\u003c/li\u003e\n\u003c/ul\u003e\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e需要注意要在Github的Setting里设置Pages的CNAME\u003c/p\u003e\n\u003ch2 id=\"12-hugo-安装与配置\"\u003e1.2 Hugo 安装与配置\u003c/h2\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003e安装 Hugo\u003c/strong\u003e：在本地机器上通过 Homebrew 安装了 Hugo：\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ebrew install hugo\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch1 id=\"2-配置博客\"\u003e2. 配置博客\u003c/h1\u003e\n\u003ch2 id=\"21-创建一个-hugo-网站\"\u003e2.1 创建一个 Hugo 网站\u003c/h2\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ehugo new site myblog\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan style=\"display:flex;\"\u003e\u003cspan\u003ecd myblog\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"22-选择并安装主题\"\u003e2.2 选择并安装主题\u003c/h2\u003e\n\u003cp\u003e我选择了简洁风格的PaperMod主题\u003c/p\u003e","title":"个人博客搭建笔记"}]